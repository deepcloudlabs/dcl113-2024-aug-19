 I. Imperative Programming: procedural programming, oop, aop, gp, ...
   Modeling -> Data/Behaviour
   Flow/Algorithm -> Solution Design
   Global Data -> implementation of algorithm -> Solution
   How to solve the problem: Problem -> Solution
II. Declarative Programming: SQL (Structured Query Language)
    Data -> Describe Solution -> Solution
            What the solution is

    select sum(population)
    from countries
    where continent='Asia'

    -> functional programming <-
    i. HoF ii. Pure function
    a. lazy evaluation
    b. partial function
    c. generator function
    d. async function
    fp's function -> variable, attribute, parameter, return
    immutability
    functional programming (c++) -> reactive programming (library: rxcpp)

    C++: fp -> oop
    oop: class -> object
         encapsulation -> data + method
         information hiding, ocp, srp, isp, ...

    Higher Order Function -> Pure Function
    STL: transform, accumulate, ...
      i. c-like functions
         int topla(int x,int y){
            return x+y;
         }
     ii. lambda expression -> pure
         [z](int x,int y){return x+y;} -- compiler --> functor
    iii. function object
         struct Topla { // function object -> functor
            int operator()(int x,int y){ // pure
                return x+y;
            }
         };
    fp -> immutable -> ready to be parallelized

    -----------------------------
    C#     -> LINQ -> parallel
    Java   -> Stream API -> parallel
    -----------------------------
    C++    -> ranges -> serial -> C++26 -> parallel
              https://github.com/pdziepak/ranges-gpu
           auto on_cpu = std::vector<int>{10, 20, 30, 40, 50, 60, 70, 80, 90};
           auto result = ranges_gpu::view::zip(
                    ranges_gpu::view::iota(1, 10),
                    on_cpu | ranges_gpu::view::to_gpu()
                )
            | ranges_gpu::view::transform([] __device__(ranges_gpu::pair<int, int> v) {
                    return v.first + v.second * 2;
                })
            | ranges_gpu::view::filter([] __device__(int x) {
                    return x % 2 && x / 10 <= 8;
                })
            | ranges_gpu::action::to_cpu()
            ;
    -----------------------------
    nVidia         -> CUDA  : GPU-only
                      C/C++
    vendor neutral -> OpenCL: CPU + GPU
                      C/C++
    -----------------------------
    JS     -> filter/map/reduce -> wasm
    Python -> filter/map/reduce, serial
    -----------------------------
    // Mixed Paradigm
    // oop
    // fp
    // aop
    // gp
    // procedural programming